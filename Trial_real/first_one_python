import tkinter as tk
from tkinter import ttk
import requests
from bs4 import BeautifulSoup
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# Initialize lists to store humidity and temperature data
humidity_data = []
temperature_data = []

def fetch_data():
    try:
        response = requests.get("http://192.168.0.106/")  # Replace "your_server_ip" with the actual IP address of your server
        html_content = response.text
        soup = BeautifulSoup(html_content, 'html.parser')
        sensor_data_div = soup.find('div', id='sensorData')
        led_status_div = soup.find('div', id='ledStatus')
        if sensor_data_div:
            humidity_p = sensor_data_div.find('p', string=lambda text: "Humidity:" in text)
            temperature_p = sensor_data_div.find('p', string=lambda text: "Temperature:" in text)
            if humidity_p and temperature_p:
                humidity = float(humidity_p.get_text().split(":")[1].strip().strip('%'))
                temperature_text = temperature_p.get_text().split(":")[1].strip().replace('Â', '').replace('C', '')  # Remove unwanted characters
                temperature = float(temperature_text)  # Convert temperature to float
                humidity_data.append(humidity)  # Append new humidity value to the list
                temperature_data.append(temperature)  # Append new temperature value to the list
                update_plots_and_display(humidity, temperature)
            else:
                print("Humidity or temperature not found in sensorData.")
        else:
            print("Sensor data div not found in response.")
        if led_status_div:
            led_status = led_status_div.text.strip()
            led_status_label.config(text=f"LED Status: {led_status}")
    except Exception as e:
        print("Error fetching data:", e)
    
    root.after(1000, fetch_data)  # Schedule next data fetch after 1000 milliseconds (1 second)

def update_plots_and_display(humidity, temperature):
    plt.clf()  # Clear the current figure
    
    plt.subplot(221)  # Humidity plot
    plt.plot(humidity_data, 'g-', label='Humidity')
    plt.title('Humidity')
    plt.xlabel('Time')
    plt.ylabel('Value')
    plt.grid(True)
    plt.legend()

    plt.subplot(222)  # Temperature plot
    plt.plot(temperature_data, 'r-', label='Temperature')
    plt.title('Temperature')
    plt.xlabel('Time')
    plt.ylabel('Value')
    plt.grid(True)
    plt.legend()

    plt.subplot(223)  # Nutrients for Coriander
    coriander_nutrients_label.config(text="Nutrients for Coriander:")
    for i, (nutrient, requirement) in enumerate(coriander_nutrients.items(), start=1):
        ttk.Label(nutrients_frame, text=f"{nutrient}:").grid(row=i, column=0, padx=5, pady=5, sticky="w")
        ttk.Label(nutrients_frame, text=requirement).grid(row=i, column=1, padx=5, pady=5, sticky="w")

    plt.tight_layout()  # Adjust layout to prevent overlapping

    humidity_display_label.config(text="Humidity: {:.2f}%".format(humidity))
    temperature_display_label.config(text="Temperature: {:.2f}°C".format(temperature))

    canvas.draw()  # Draw the plot
    root.update()  # Update the tkinter window

root = tk.Tk()
root.title("Coriander Farming Assistant")

plot_frame = ttk.Frame(root)
plot_frame.pack(padx=10, pady=10)

nutrients_frame = ttk.Frame(root)
nutrients_frame.pack(padx=10, pady=10)

# Create and position the plot
plt.figure(figsize=(10, 5))
plt.subplot(221)  # Humidity plot
plt.subplot(222)  # Temperature plot
plt.subplot(223)  # Nutrients for Coriander
plt.tight_layout()  # Adjust layout to prevent overlapping

humidity_display_label = ttk.Label(plot_frame, text="Humidity: -")
humidity_display_label.grid(row=0, column=0, padx=5, pady=5)
temperature_display_label = ttk.Label(plot_frame, text="Temperature: -")
temperature_display_label.grid(row=0, column=1, padx=5, pady=5)

coriander_nutrients_label = ttk.Label(nutrients_frame, text="Nutrients for Coriander:")
coriander_nutrients_label.grid(row=0, column=0, padx=5, pady=5, sticky="w")

coriander_nutrients = {
    "Nitrogen": "High",
    "Phosphorus": "Medium",
    "Potassium": "High",
    "Calcium": "Medium",
    "Magnesium": "Low"
}

# LED Status label
led_status_label = ttk.Label(root, text="LED Status: -")
led_status_label.pack(padx=10, pady=5)

# Embed the Matplotlib plot into the tkinter window
canvas = FigureCanvasTkAgg(plt.gcf(), master=plot_frame)
canvas.get_tk_widget().grid(row=1, columnspan=2, padx=5, pady=5)

fetch_data()  # Initial fetch
root.mainloop()
